In C#, collections that support key-value pairs and index-based access offer a variety of ways to store and manage data. Here’s a comprehensive list of such collections:

Key-Value Collections:

Dictionary<TKey, TValue>: Stores key-value pairs. Access elements by key.
SortedDictionary<TKey, TValue>: Similar to Dictionary but sorted by key.
SortedList<TKey, TValue>: Represents a collection of key/value pairs that are sorted by key based on the associated IComparer implementation1.
Index-Based Collections:

List<T>: Provides methods to search, sort, and manipulate lists. It’s accessed by index.
Array: Fixed-size, zero-based indexed collection.
Specialized Collections:

NameValueCollection: Can store multiple string values under a single key and accessed by key or index1.
OrderedDictionary: A hybrid of a Dictionary and an ArrayList, allowing access by key or index.
StringCollection: A collection of strings accessed by index.
Collections with Both Key and Index Access:

KeyedCollection<TKey, TItem>: A hybrid dictionary and list, where items can be accessed by a key or an index1.
HybridDictionary: Scales from a ListDictionary to a Hashtable as it grows.
Other Collections:

Queue<T>: A first-in, first-out collection.
Stack<T>: A last-in, first-out collection.
LinkedList<T>: A doubly-linked list.
HashSet<T>: A set of unique values.
These collections are part of the System.Collections.Generic namespace, except for the specialized collections which are in System.Collections.Specialized. Each collection type has its own set of methods and properties that provide various functionalities like adding, removing, and finding items within the collection. Remember that the choice of collection depends on the specific requirements of the application, such as the need for sorting, searching efficiency, or the uniqueness of elements.