The **`base` keyword** in C# serves two primary purposes when working with inheritance:

1. **Calling Overridden Methods**:
   - When a method in a derived class overrides a method from the base class, you can use `base` to explicitly call the base class method.
   - For example, consider a base class `Person` with a method `GetInfo()`. In a derived class `Employee`, you can call the base class `GetInfo()` using `base.GetInfo()`.
   - Here's an example:

     
     public class Person
     {
         protected string ssn = "444-55-6666";
         protected string name = "John L. Malgraine";

         public virtual void GetInfo()
         {
             Console.WriteLine($"Name: {name}");
             Console.WriteLine($"SSN: {ssn}");
         }
     }

     class Employee : Person
     {
         public string id = "ABC567EFG";

         public override void GetInfo()
         {
             // Calling the base class GetInfo method:
             base.GetInfo();
             Console.WriteLine($"Employee ID: {id}");
         }
     }

     // Usage:
     Employee E = new Employee();
     E.GetInfo();
     ```

2. **Specifying Base-Class Constructors**:
   - When creating instances of a derived class, you can use `base` to specify which base-class constructor should be called.
   - For example, if the base class `BaseClass` has constructors with different parameters, you can choose which one to invoke in the derived class using `base`.
   - Here's an example:

    
     public class BaseClass
     {
         int num;

         public BaseClass()
         {
             Console.WriteLine("in BaseClass()");
         }

         public BaseClass(int i)
         {
             num = i;
             Console.WriteLine("in BaseClass(int i)");
         }

         public int GetNum()
         {
             return num;
         }
     }

     public class DerivedClass : BaseClass
     {
         // This constructor will call BaseClass.BaseClass()
         public DerivedClass() : base()
         {
         }

         // This constructor will call BaseClass.BaseClass(int i)
         public DerivedClass(int i) : base(i)
         {
         }

         static void Main()
         {
             DerivedClass md = new DerivedClass();
             DerivedClass md1 = new DerivedClass(1);
         }
     }
